usage: partwriter.py [-h] [-v] [--tritone TRITONE] [--smoothness SMOOTHNESS]
                     [--parallel PARALLEL] [--threshold THRESHOLD]
                     [--doubling DOUBLING] [--leadingtone LEADINGTONE]
                     [--largeleaps LARGELEAPS] [--octaveorless OCTAVEORLESS]
                     [--crossover CROSSOVER]
                     inputfile

Automated part writing for four-part harmony.
Supports the following rules:
  Keep all voices in range
  Avoid parallel 5ths, octaves, and unisons
  Never double leading tone
  Double root when triad is in root position
  Double soprano when major/minor triads are in first inversion
  Double bass when diminished triads are in first inversion
  All factors of triads should be present
  Avoid large leaps of a 6th or more. Octave leaps are ok
  Maintain an octave or less between soprano and alto and between alto and tenor
  Do not crossover/overlap voices
  Avoid tritones
  Have each part flow smoothly (minimize skips)

Input files have the following format:
  Key: <note>
  [Notes]
  <bass>,<tenor>,<alto>,<soprano>,<triad root>:<triad type>
  <bass>,<tenor>,<alto>,<soprano>,<triad root>:<triad type>
  <bass>,<tenor>,<alto>,<soprano>,<triad root>:<triad type>
  ...

An example input file:
  Key: C
  [Notes]
  C3,  , G4,   , C:M
  C3,  , E4,   , C:M
    ,  ,   , D5, D:m
    ,  ,   , D5, G:M
    ,  ,   , C5, F:M
    ,  ,   , C5, C:M

The octave only needs to be specified for the bass, tenor, alto,
and soprano notes in the input file. The triad root and the key
should not have an octave specifier. The program will attempt to
find the best combination of notes to fill in the blanks. Spaces
and tabs are ignored, so they may be used for formatting.

You may specify how to weight infractions of the rules using 'badness' factors
(like in TeX) through command line arguments. The only exception is the
calculation of the badness value for smoothness. You can specify a
python-style lambda on the command line that will be used to calculate the
badness value. The lambda should take one argument and return an integer. Once
the badness value of a solution crosses the threshold it is discarded.

This program has a simple progress indicator to let you know that it is working.
Depending on the number of blanks given as input, the execution time will vary.
Before exiting, all possible solutions will be printed to the console, ranked
from the worst solution to the best (so that the best is on the bottom and can
be read on a terminal without scrolling up). The badness factor and a partial
MD5 hash will also be printed in order to easily differentiate between
solutions.

positional arguments:
  inputfile             Input file

optional arguments:
  -h, --help            show this help message and exit
  -v, --verbose
  --tritone TRITONE     badness value for tritone (default: '10000000')
  --smoothness SMOOTHNESS
                        badness function (as python lambda) for smoothness
                        (default: 'lambda a: pow(2,a)')
  --parallel PARALLEL   badness value for parallel (default: '10000000')
  --threshold THRESHOLD
                        badness value for threshold (default: '2500000')
  --doubling DOUBLING   badness value for doubling (default: '2500000')
  --leadingtone LEADINGTONE
                        badness value for leadingtone (default: '10000000')
  --largeleaps LARGELEAPS
                        badness value for largeleaps (default: '5000000')
  --octaveorless OCTAVEORLESS
                        badness value for octaveorless (default: '5000000')
  --crossover CROSSOVER
                        badness value for crossover (default: '10000000')

Copyright (c) 2015 Souvik Banerjee. Released under GNU AGPLv3
